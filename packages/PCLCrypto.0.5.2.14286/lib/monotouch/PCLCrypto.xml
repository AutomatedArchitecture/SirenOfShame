<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCLCrypto</name>
    </assembly>
    <members>
        <member name="T:PCLCrypto.KSec">
            <summary>
            Constants for iOS Security APIs.
            </summary>
        </member>
        <member name="M:PCLCrypto.KSec.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PCLCrypto.KSec"/> class.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrKeyType">
            <summary>
            Gets the kSecAttrKeyType value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrKeySizeInBits">
            <summary>
            Gets the kSecAttrKeySizeInBits value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrKeyTypeRSA">
            <summary>
            Gets the kSecAttrKeyTypeRSA value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrApplicationTag">
            <summary>
            Gets the kSecAttrApplicationTag value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrIsPermanent">
            <summary>
            Gets the kSecAttrIsPermanent value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.PublicKeyAttrs">
            <summary>
            Gets the kSecPublicKeyAttrs value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.PrivateKeyAttrs">
            <summary>
            Gets the kSecPrivateKeyAttrs value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.ClassKey">
            <summary>
            Gets the kSecClassKey value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.Class">
            <summary>
            Gets the kSecClass value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.ReturnData">
            <summary>
            Gets the kSecReturnData value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrAccessible">
            <summary>
            Gets the kSecAttrAccessible value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrAccessibleWhenUnlocked">
            <summary>
            Gets the kSecAttrAccessibleWhenUnlocked value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.ReturnRef">
            <summary>
            Gets the kSecReturnRef value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.ValueData">
            <summary>
            Gets the kSecValueData value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrKeyClass">
            <summary>
            Gets the kSecAttrKeyClass value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.ReturnPersistentRef">
            <summary>
            Gets the kSecReturnPersistentRef value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrKeyClassPublic">
            <summary>
            Gets the kSecAttrKeyClassPublic value.
            </summary>
        </member>
        <member name="P:PCLCrypto.KSec.AttrKeyClassPrivate">
            <summary>
            Gets the kSecAttrKeyClassPrivate value.
            </summary>
        </member>
        <member name="T:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider">
            <summary>
            The .NET Framework implementation of RSA.
            </summary>
        </member>
        <member name="F:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.#ctor(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.CreateKeyPair(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.ImportKeyPair(System.Byte[],PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.ImportPublicKey(System.Byte[],PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.ImportKey(PCLCrypto.RSAParameters,System.String)">
            <summary>
            Imports an RSA key into the iOS keychain.
            </summary>
            <param name="parameters">The RSA parameters.</param>
            <param name="tag">The tag by which this key will be known.</param>
            <returns>The security key.</returns>
        </member>
        <member name="P:PCLCrypto.RsaAsymmetricKeyAlgorithmProvider.Algorithm">
            <inheritdoc/>
        </member>
        <member name="T:PCLCrypto.RsaCryptographicKey">
            <summary>
            The iOS implementation of the <see cref="T:PCLCrypto.ICryptographicKey"/> interface
            for RSA keys.
            </summary>
        </member>
        <member name="T:PCLCrypto.CryptographicKey">
            <summary>
            Base class for implementations of the <see cref="T:PCLCrypto.ICryptographicKey"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.Sign(System.Byte[])">
            <summary>
            Signs data with this key.
            </summary>
            <param name="data">The data.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.VerifySignature(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature of data with this key.
            </summary>
            <param name="data">The data.</param>
            <param name="signature">The signature.</param>
            <returns>
            <c>true</c> if the signature is valid.
            </returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.SignHash(System.Byte[])">
            <summary>
            Signs data with this key.
            </summary>
            <param name="data">The hash of the data.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies the signature of a hash of data with this key.
            </summary>
            <param name="data">The hash of the data.</param>
            <param name="signature">The signature.</param>
            <returns>
            <c>true</c> if the signature is valid.
            </returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The plaintext.</param>
            <param name="iv">The initialization vector. Should be <c>null</c> for asymmetric algorithms.</param>
            <returns>The ciphertext.</returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The ciphertext.</param>
            <param name="iv">The initialization vector. Should be <c>null</c> for asymmetric algorithms.</param>
            <returns>The plaintext.</returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.CreateEncryptor(System.Byte[])">
            <summary>
            Creates a crypto transform to encrypt a stream.
            </summary>
            <param name="iv">The initialization vector. Should be <c>null</c> for asymmetric algorithms.</param>
            <returns>The ciphertext.</returns>
        </member>
        <member name="M:PCLCrypto.CryptographicKey.CreateDecryptor(System.Byte[])">
            <summary>
            Creates a crypto transform to decrypt a stream.
            </summary>
            <param name="iv">The initialization vector. Should be <c>null</c> for asymmetric algorithms.</param>
            <returns>The plaintext.</returns>
        </member>
        <member name="F:PCLCrypto.RsaCryptographicKey.publicKey">
            <summary>
            The platform public key.
            </summary>
        </member>
        <member name="F:PCLCrypto.RsaCryptographicKey.privateKey">
            <summary>
            The platform private key.
            </summary>
        </member>
        <member name="F:PCLCrypto.RsaCryptographicKey.keyIdentifier">
            <summary>
            The tag that may be used to query the keychain for the key.
            </summary>
        </member>
        <member name="F:PCLCrypto.RsaCryptographicKey.algorithm">
            <summary>
            The algorithm to use when performing cryptography.
            </summary>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.#ctor(MonoTouch.Security.SecKey,System.String,PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.RsaCryptographicKey"/> class.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="keyIdentifier">The key identifier that may be used to query the keychain.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.#ctor(MonoTouch.Security.SecKey,MonoTouch.Security.SecKey,System.String,PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.RsaCryptographicKey"/> class.
            </summary>
            <param name="publicKey">The public key.</param>
            <param name="privateKey">The private key.</param>
            <param name="keyIdentifier">The key identifier that may be used to query the keychain.</param>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.Export(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.ExportPublicKey(PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.GetPrivateKeyIdentifierWithTag(System.String)">
            <summary>
            Returns a key identifier specifically for private keys.
            </summary>
            <param name="tag">The generic private/public key identifier.</param>
            <returns>The specific private key identifier.</returns>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.GetPublicKeyIdentifierWithTag(System.String)">
            <summary>
            Returns a key identifier specifically for public keys.
            </summary>
            <param name="tag">The generic private/public key identifier.</param>
            <returns>The specific public key identifier.</returns>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.CreateKeyQueryDictionary(System.String)">
            <summary>
            Initializes a dictionary used to query for keys.
            </summary>
            <param name="tag">The tag of the key to be accessed.</param>
            <returns>The query dictionary.</returns>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.Sign(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.VerifySignature(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.SignHash(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.VerifyHash(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.Encrypt(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.Decrypt(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.TrimBuffer(System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Resizes a buffer to match the prescribed size.
            </summary>
            <param name="buffer">The buffer to be resized.</param>
            <param name="bufferLength">Desired length of the buffer.</param>
            <param name="secureClearOldBuffer">if set to <c>true</c>, the old buffer is cleared of its contents in the event that it is discarded.</param>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.GetPadding(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Gets the iOS padding algorithm for a given asymmetric algorithm.
            </summary>
            <param name="algorithm">The asymmetric algorithm.</param>
            <returns>The iOS platform padding enum.</returns>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.SecKeyDecrypt(System.IntPtr,MonoTouch.Security.SecPadding,System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Decrypts a ciphertext that was asymmetrically encrypted.
            </summary>
            <param name="handle">The <see cref="P:MonoTouch.Security.SecKey.Handle"/> value from the private key to use in decryption.</param>
            <param name="padding">The padding algorithm applied during encryption.</param>
            <param name="cipherText">A pointer to the ciphertext to decrypt.</param>
            <param name="cipherTextLen">The length of the ciphertext to decrypt.</param>
            <param name="plainText">The buffer to receive the plaintext. This should be at least as large as the <paramref name="cipherText"/> buffer.</param>
            <param name="plainTextLen">Indicates the length of the <paramref name="plainText"/> buffer. Upon return, this value is set to the length of the actual decrypted bytes.</param>
            <returns>A value indicating the successful or failure result of the operation.</returns>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.KeyDataWithTag(System.String)">
            <summary>
            Gets thee PKCS#1 key data for a key in the key chain.
            </summary>
            <param name="tag">The unique tag for the key to retrieve data for.</param>
            <returns>The raw key data.</returns>
        </member>
        <member name="M:PCLCrypto.RsaCryptographicKey.KeyRefWithTag(System.String)">
            <summary>
            Obtains a reference to an iOS security key given its identifying tag.
            </summary>
            <param name="tag">The tag of the key in the keychain.</param>
            <returns>The security key.</returns>
        </member>
        <member name="P:PCLCrypto.RsaCryptographicKey.KeySize">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.RsaCryptographicKey.Algorithm">
            <summary>
            Gets the algorithm to use with this key.
            </summary>
        </member>
        <member name="T:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory">
            <summary>
            .NET Framework implementation of the <see cref="T:PCLCrypto.IAsymmetricKeyAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory"/> class.
            </summary>
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.AsymmetricAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.AsymmetricKeyAlgorithmProviderFactory.GetHashAlgorithmEnum(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Gets the hash algorithm for a given asymmetric algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>A hash algorithm.</returns>
        </member>
        <member name="T:PCLCrypto.CryptographicBuffer">
            <summary>
            The .NET Framework implementation of the <see cref="T:PCLCrypto.ICryptographicBuffer"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.Compare(System.Byte[],System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.ConvertBinaryToString(System.Text.Encoding,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.ConvertStringToBinary(System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.CopyToByteArray(System.Byte[],System.Byte[]@)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.CreateFromByteArray(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.DecodeFromBase64String(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.DecodeFromHexString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.EncodeToBase64String(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.EncodeToHexString(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.GenerateRandom(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.CryptographicBuffer.GenerateRandomNumber">
            <inheritdoc/>
        </member>
        <member name="T:PCLCrypto.CryptographicEngine">
            <summary>
            A .NET Framework implementation of <see cref="T:PCLCrypto.ICryptographicEngine"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.Encrypt(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.CreateEncryptor(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.Decrypt(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.CreateDecryptor(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.Sign(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.SignHashedData(PCLCrypto.ICryptographicKey,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.VerifySignature(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.VerifySignatureWithHashInput(PCLCrypto.ICryptographicKey,System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.DeriveKeyMaterial(PCLCrypto.ICryptographicKey,PCLCrypto.IKeyDerivationParameters,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.GetHashAlgorithmOID(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Gets the OID (or name) for a given hash algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>A non-empty string.</returns>
        </member>
        <member name="M:PCLCrypto.CryptographicEngine.GetHashAlgorithm(PCLCrypto.AsymmetricAlgorithm)">
            <summary>
            Creates a hash algorithm instance that is appropriate for the given algorithm.T
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>The hash algorithm.</returns>
        </member>
        <member name="T:PCLCrypto.DeriveBytes">
            <summary>
            Exposes the .NET Framework implementation of <see cref="T:PCLCrypto.IDeriveBytes"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.DeriveBytes.GetBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.DeriveBytes.GetBytes(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:PCLCrypto.HashAlgorithmProvider">
            <summary>
            The .NET Framework implementation of <see cref="T:PCLCrypto.IHashAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.HashAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.#ctor(PCLCrypto.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.HashAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.CreateHash">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.HashData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProvider.CreateHashAlgorithm(PCLCrypto.HashAlgorithm)">
            <summary>
            Creates the hash algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>
            A platform-specific hash algorithm.
            </returns>
        </member>
        <member name="P:PCLCrypto.HashAlgorithmProvider.Algorithm">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.HashAlgorithmProvider.HashLength">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.KeyDerivationAlgorithmProvider">
            <summary>
            The .NET Framework implementation of the <see cref="T:PCLCrypto.IKeyDerivationAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.KeyDerivationAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProvider.#ctor(PCLCrypto.KeyDerivationAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.KeyDerivationAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProvider.CreateKey(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.KeyDerivationAlgorithmProvider.Algorithm">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.KeyDerivationAlgorithmProviderFactory">
            <summary>
            The .NET Framework implementation of the <see cref="T:PCLCrypto.IKeyDerivationAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.KeyDerivationAlgorithm)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.KeyDerivationCryptographicKey">
            <summary>
            A .NET Framework implementation of the <see cref="T:PCLCrypto.ICryptographicKey"/> interface
            for use with <see cref="T:PCLCrypto.KeyDerivationAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.KeyDerivationCryptographicKey.key">
            <summary>
            The key material.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationCryptographicKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.KeyDerivationCryptographicKey"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:PCLCrypto.KeyDerivationCryptographicKey.Export(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationCryptographicKey.ExportPublicKey(PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.KeyDerivationCryptographicKey.KeySize">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.KeyDerivationCryptographicKey.Key">
            <summary>
            Gets the key material.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:PCLCrypto.KeyDerivationParametersFactory">
            <summary>
            A .NET Framework implementation of the <see cref="T:PCLCrypto.IKeyDerivationParametersFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.BuildForPbkdf2(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.BuildForSP800108(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.BuildForSP80056a(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.KeyDerivationParametersFactory.KeyDerivationParameters">
            <summary>
            A .NET Framework implementation of the <see cref="T:PCLCrypto.IKeyDerivationParameters"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.KeyDerivationParametersFactory.KeyDerivationParameters.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.KeyDerivationParametersFactory.KeyDerivationParameters"/> class.
            </summary>
            <param name="iterationCount">The iteration count.</param>
            <param name="kdfGenericBinary">The KDF generic binary.</param>
        </member>
        <member name="P:PCLCrypto.KeyDerivationParametersFactory.KeyDerivationParameters.IterationCount">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.KeyDerivationParametersFactory.KeyDerivationParameters.KdfGenericBinary">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.MacAlgorithmProviderFactory">
            <summary>
            The shared implementation of the <see cref="T:PCLCrypto.IMacAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.MacAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProviderFactory.GetAlgorithmName(PCLCrypto.MacAlgorithm)">
            <summary>
            Returns the string to pass to the platform APIs for a given algorithm.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific string to pass to OpenAlgorithm.</returns>
        </member>
        <member name="T:PCLCrypto.MacCryptographicKey">
            <summary>
            A .NET Framework implementation of the <see cref="T:PCLCrypto.ICryptographicKey"/> interface
            for use with MACs.
            </summary>
        </member>
        <member name="F:PCLCrypto.MacCryptographicKey.algorithm">
            <summary>
            The algorithm to use when hashing.
            </summary>
        </member>
        <member name="F:PCLCrypto.MacCryptographicKey.key">
            <summary>
            The key material.
            </summary>
        </member>
        <member name="M:PCLCrypto.MacCryptographicKey.#ctor(PCLCrypto.MacAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.MacCryptographicKey"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:PCLCrypto.MacCryptographicKey.Export(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacCryptographicKey.ExportPublicKey(PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacCryptographicKey.Sign(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacCryptographicKey.VerifySignature(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.MacCryptographicKey.KeySize">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.RandomNumberGenerator">
            <summary>
            Exposes the .NET Framework implementation of <see cref="T:PCLCrypto.IRandomNumberGenerator"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.RandomNumberGenerator.RandomSource">
            <summary>
            The thread-safe source for random numbers.
            </summary>
        </member>
        <member name="M:PCLCrypto.RandomNumberGenerator.GetBytes(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:PCLCrypto.SymmetricKeyAlgorithmProviderFactory">
            <summary>
            WinRT implementation of the <see cref="T:PCLCrypto.ISymmetricKeyAlgorithmProviderFactory"/> interface.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProviderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.SymmetricKeyAlgorithmProviderFactory"/> class.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.SymmetricAlgorithm)">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.CryptoStream">
            <summary>
            Defines a stream that links data streams to cryptographic transformations.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.chainedStream">
            <summary>
            The stream that is read from or written to with each I/O operation.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.transform">
            <summary>
            The crypto transform to use for each block.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.mode">
            <summary>
            The read/write mode of this stream.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.inputBuffer">
            <summary>
            Data that has not yet been transformed.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.outputBuffer">
            <summary>
            Data that has been transformed but not flushed.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.inputBufferSize">
            <summary>
            The number of valid bytes in <see cref="F:PCLCrypto.CryptoStream.inputBuffer"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.outputBufferSize">
            <summary>
            The number of valid bytes in <see cref="F:PCLCrypto.CryptoStream.outputBuffer"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.CryptoStream.outputBufferIndex">
            <summary>
            The index of the first valid byte in <see cref="F:PCLCrypto.CryptoStream.outputBuffer"/>.
            This advances when Read is called with a smaller buffer than we have bytes available.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptoStream.#ctor(System.IO.Stream,PCLCrypto.ICryptoTransform,PCLCrypto.CryptoStreamMode)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.CryptoStream"/> class.
            </summary>
            <param name="stream">The stream to write to or read from.</param>
            <param name="transform">The cryptographic operation to use for transforming data.</param>
            <param name="mode">The mode of operation.</param>
        </member>
        <member name="M:PCLCrypto.CryptoStream.WriteTo(System.IO.Stream,PCLCrypto.ICryptoTransform[])">
            <summary>
            Creates a CryptoStream that can be used to write to the specified stream
            after passing through a series of transforms.
            </summary>
            <param name="stream">The ultimate stream to be written to.</param>
            <param name="transforms">The transformations to apply to the data before writing to <paramref name="stream"/>.</param>
            <returns>A CryptoStream instance.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoStream.ReadFrom(System.IO.Stream,PCLCrypto.ICryptoTransform[])">
            <summary>
            Creates a CryptoStream that can be used to read from the specified stream,
            passing the retrieved data through a series of transforms before being read
            from this stream.
            </summary>
            <param name="stream">The ultimate stream to be read from.</param>
            <param name="transforms">The transformations to apply to the data after reading from <paramref name="stream"/>.</param>
            <returns>A CryptoStream instance.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoStream.FlushFinalBlock">
            <summary>
            Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.
            </summary>
            <remarks>
            Calling the Close method will call FlushFinalBlock. If you do not call Close, call FlushFinalBlock to complete flushing the buffer. Call FlushFinalBlock only when all stream activity is complete.
            </remarks>
        </member>
        <member name="M:PCLCrypto.CryptoStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.CryptoStream.Chain(System.IO.Stream,PCLCrypto.CryptoStreamMode,PCLCrypto.ICryptoTransform[])">
            <summary>
            Creates a CryptoStream chain of transforms.
            </summary>
            <param name="stream">The ultimate stream to be read from or written to.</param>
            <param name="cryptoStreamMode">Whether to prepare for read or write operations to trigger the operations.</param>
            <param name="transforms">The transforms to apply.</param>
            <returns>The start of the chain of CryptoStreams.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoStream.ChainWrite(System.IO.Stream,System.Collections.Generic.IEnumerator{PCLCrypto.ICryptoTransform})">
            <summary>
            Creates a CryptoStream chain of transforms for writing streams.
            </summary>
            <param name="stream">The ultimate stream to be read from or written to.</param>
            <param name="transforms">An enumerator positioned just before the transform to create for the outer-most stream.</param>
            <returns>
            The start of the chain of CryptoStreams.
            </returns>
        </member>
        <member name="P:PCLCrypto.CryptoStream.HasFlushedFinalBlock">
            <summary>
            Gets a value indicating whether the final buffer block has been written to the underlying stream. 
            </summary>
        </member>
        <member name="P:PCLCrypto.CryptoStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.Length">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.CryptoStream.Position">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.NetFxCrypto">
            <summary>
            Exposes cryptography using API familiar to .NET Framework developers.
            </summary>
        </member>
        <member name="F:PCLCrypto.NetFxCrypto.randomNumberGenerator">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IRandomNumberGenerator"/>.
            </summary>
        </member>
        <member name="P:PCLCrypto.NetFxCrypto.RandomNumberGenerator">
            <summary>
            Gets a cryptographically strong random number generator.
            </summary>
        </member>
        <member name="P:PCLCrypto.NetFxCrypto.DeriveBytes">
            <summary>
            Gets tools to derive a key from a password for buffer.
            </summary>
        </member>
        <member name="T:PCLCrypto.SymmetricAlgorithmExtensions">
            <summary>
            Extension methods for the <see cref="T:PCLCrypto.SymmetricAlgorithm"/> enum and related types.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.IsBlockCipher(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Gets a value indicating whether the specified algorithm is implemented by a block cipher.
            </summary>
            <param name="algorithm">The algorithm to check.</param>
            <returns><c>true</c> if the cipher is a block cipher; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.GetName(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Returns a platform-specific algorithm that conforms to the prescribed platform-neutral algorithm.
            </summary>
            <param name="algorithm">The PCL algorithm.</param>
            <returns>
            The platform-specific algorithm.
            </returns>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.GetMode(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Gets the block mode for an algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>The block mode.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.GetPadding(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Gets the padding.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>The padding.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.UsesIV(PCLCrypto.SymmetricAlgorithmMode)">
            <summary>
            Gets a value indicating whether the specified block mode requires an initialization vector.
            </summary>
            <param name="mode">The block mode to check.</param>
            <returns><c>true</c> if the block mode uses an initialization vector; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.UsesIV(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Gets a value indicating whether the specified algorithm requires an initialization vector.
            </summary>
            <param name="algorithm">The algorithm to check.</param>
            <returns><c>true</c> if the block mode uses an initialization vector; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricAlgorithmExtensions.GetString(PCLCrypto.SymmetricAlgorithmName)">
            <summary>
            Gets the string representation of an algorithm name.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>A non-empty string, such as "AES".</returns>
        </member>
        <member name="T:PCLCrypto.WinRTCrypto">
            <summary>
            Exposes cryptography using API familiar to WinRT developers.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.asymmetricKeyAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IAsymmetricKeyAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.symmetricKeyAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.ISymmetricKeyAlgorithmProvider"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.hashAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IHashAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.macAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IMacAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.keyDerivationAlgorithmProvider">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IKeyDerivationAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.keyDerivationParametersFactory">
            <summary>
            Backing field storing a shareable, thread-safe implementation
            of <see cref="T:PCLCrypto.IKeyDerivationParametersFactory"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.cryptographicEngine">
            <summary>
            Backing field for the CryptographicEngine property.
            </summary>
        </member>
        <member name="F:PCLCrypto.WinRTCrypto.cryptographicBuffer">
            <summary>
            Backing field for the CryptographicBuffer property.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.AsymmetricKeyAlgorithmProvider">
            <summary>
            Gets the asymmetric key algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.SymmetricKeyAlgorithmProvider">
            <summary>
            Gets the symmetric key algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.HashAlgorithmProvider">
            <summary>
            Gets the hash algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.MacAlgorithmProvider">
            <summary>
            Gets the MAC algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.KeyDerivationAlgorithmProvider">
            <summary>
            Gets the key derivation algorithm provider factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.KeyDerivationParameters">
            <summary>
            Gets the key derivation parameters factory.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.CryptographicEngine">
            <summary>
            Gets the service for signatures and encryption.
            </summary>
        </member>
        <member name="P:PCLCrypto.WinRTCrypto.CryptographicBuffer">
            <summary>
            Gets the service for buffers.
            </summary>
        </member>
        <member name="T:PCLCrypto.WinRTExtensions">
            <summary>
            Extension methods that add functionality to the WinRT crypto API.
            </summary>
        </member>
        <member name="M:PCLCrypto.WinRTExtensions.ImportParameters(PCLCrypto.IAsymmetricKeyAlgorithmProvider,PCLCrypto.RSAParameters)">
            <summary>
            Creates a cryptographic key based on the specified RSA parameters.
            </summary>
            <param name="provider">The asymmetric algorithm provider.</param>
            <param name="parameters">The RSA parameters from which to initialize the key.</param>
            <returns>The cryptographic key.</returns>
        </member>
        <member name="M:PCLCrypto.WinRTExtensions.ExportParameters(PCLCrypto.ICryptographicKey,System.Boolean)">
            <summary>
            Exports the RSA parameters of a cryptographic key.
            </summary>
            <param name="key">The cryptographic key.</param>
            <param name="includePrivateParameters"><c>true</c> to include the private key in the exported parameters; <c>false</c> to only include the public key.</param>
            <returns>The RSA parameters for the key.</returns>
        </member>
        <member name="T:PCLCrypto.CryptoUtilities">
            <summary>
            An assortment of crypto utilities.
            </summary>
        </member>
        <member name="M:PCLCrypto.CryptoUtilities.BufferEquals(System.Byte[],System.Byte[])">
            <summary>
            Performs a constant time comparison between two buffers.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <returns><c>true</c> if the buffers have exactly the same contents; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PCLCrypto.CryptoUtilities.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Disposes a value if it is not null.
            </summary>
            <param name="value">The value to be disposed of.</param>
        </member>
        <member name="T:PCLCrypto.HashAlgorithmProviderFactory">
            <summary>
            A WinRT implementation of <see cref="T:PCLCrypto.IHashAlgorithmProviderFactory"/>.
            </summary>
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProviderFactory.OpenAlgorithm(PCLCrypto.HashAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.HashAlgorithmProviderFactory.GetHashAlgorithmName(PCLCrypto.HashAlgorithm)">
            <summary>
            Gets the name for a given hash algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>A non-empty string.</returns>
        </member>
        <member name="T:PCLCrypto.Formatters.Asn">
            <summary>
            Encodes/decodes ASN.1 messages.
            </summary>
            <remarks>
            The ASN.1 format is documented here:
            http://en.wikipedia.org/wiki/X.690
            </remarks>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.ReadAsn1Elements(System.IO.Stream)">
            <summary>
            Reads a sequence of ASN.1 elements from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A sequence of elements.</returns>
            <remarks>
            The stream may not contain exclusively ASN.1 data.
            This method will read the stream exactly one element at a time,
            and the caller should only enumerate as many elements as are expected
            to avoid reading into other data.
            If the end of the stream is reached, the sequence terminates.
            </remarks>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.ReadAsn1Elements(System.Byte[])">
            <summary>
            Reads a sequence of ASN.1 elements from a stream.
            </summary>
            <param name="value">The buffer to read from.</param>
            <returns>A sequence of elements.</returns>
            <remarks>
            The stream may not contain exclusively ASN.1 data.
            This method will read the stream exactly one element at a time,
            and the caller should only enumerate as many elements as are expected
            to avoid reading into other data.
            If the end of the stream is reached, the sequence terminates.
            </remarks>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.WriteAsn1Element(System.IO.Stream,PCLCrypto.Formatters.Asn.DataElement)">
            <summary>
            Writes a single ASN.1 element to a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="element">The data element.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.WriteAsn1Element(PCLCrypto.Formatters.Asn.DataElement)">
            <summary>
            Returns a buffer containing an encoded ASN.1 element.
            </summary>
            <param name="element">The data element.</param>
            <returns>The encoded ASN.1 element.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.WriteAsn1Elements(PCLCrypto.Formatters.Asn.DataElement[])">
            <summary>
            Returns a buffer containing encoded ASN.1 elements.
            </summary>
            <param name="elements">The data elements to encode.</param>
            <returns>The encoded ASN.1 elements.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.GetMinimumBytesRequiredToRepresent(System.UInt32)">
            <summary>
            Gets the minimum number of bytes required to represent an unsigned integer.
            </summary>
            <param name="value">The value.</param>
            <returns>The number of bytes [1-4] required to represent the value.</returns>
        </member>
        <member name="T:PCLCrypto.Formatters.Asn.BerClass">
            <summary>
            The BER encoding Class of a data element.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerClass.Universal">
            <summary>
            The type is native to ASN.1
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerClass.Application">
            <summary>
            The type is only valid for one specific application
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerClass.ContextSpecific">
            <summary>
            Meaning of this type depends on the context (such as within a sequence, set or choice)
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerClass.Private">
            <summary>
            Defined in private specifications
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerClass.Mask">
            <summary>
            The set of bits that describe the class.
            </summary>
        </member>
        <member name="T:PCLCrypto.Formatters.Asn.BerPC">
            <summary>
            The BER encoding PC (primitive or constructed) of a data element.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerPC.Primitive">
            <summary>
            The content is primitive like an <see cref="F:PCLCrypto.Formatters.Asn.BerTag.Integer"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerPC.Constructed">
            <summary>
            The content holds type-length-value values like a <see cref="F:PCLCrypto.Formatters.Asn.BerTag.Sequence"/>.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerPC.Mask">
            <summary>
            The set of bits that describe the PC.
            </summary>
        </member>
        <member name="T:PCLCrypto.Formatters.Asn.BerTag">
            <summary>
            The BER encoding Tag of a data element.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.EndOfContent">
            <summary>
            Indicates that this is the end of the stream.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.Integer">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is an integer.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.BitString">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is a bit string.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.OctetString">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is an octet string.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.Null">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is null.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.ObjectIdentifier">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is an object identifier.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.Sequence">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is a sequence.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.SetAndSetOf">
            <summary>
            Indicates that <see cref="P:PCLCrypto.Formatters.Asn.DataElement.Content"/> is a set and set of.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.Asn.BerTag.Mask">
            <summary>
            The set of bits that describe the tag.
            </summary>
        </member>
        <member name="T:PCLCrypto.Formatters.Asn.DataElement">
            <summary>
            Describes an individual ASN.1 element.
            </summary>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.DataElement.#ctor(PCLCrypto.Formatters.Asn.BerClass,PCLCrypto.Formatters.Asn.BerPC,PCLCrypto.Formatters.Asn.BerTag,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.Formatters.Asn.DataElement"/> struct.
            </summary>
            <param name="class">The class.</param>
            <param name="pc">The PC.</param>
            <param name="tag">The tag.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.Asn.DataElement.#ctor(PCLCrypto.Formatters.Asn.BerClass,PCLCrypto.Formatters.Asn.BerPC,PCLCrypto.Formatters.Asn.BerTag,PCLCrypto.Formatters.Asn.DataElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.Formatters.Asn.DataElement"/> struct.
            </summary>
            <param name="class">The class.</param>
            <param name="pc">The PC.</param>
            <param name="tag">The tag.</param>
            <param name="nestedElements">The content.</param>
        </member>
        <member name="P:PCLCrypto.Formatters.Asn.DataElement.Class">
            <summary>
            Gets the class.
            </summary>
        </member>
        <member name="P:PCLCrypto.Formatters.Asn.DataElement.PC">
            <summary>
            Gets the PC.
            </summary>
        </member>
        <member name="P:PCLCrypto.Formatters.Asn.DataElement.Tag">
            <summary>
            Gets the Tag.
            </summary>
        </member>
        <member name="P:PCLCrypto.Formatters.Asn.DataElement.Content">
            <summary>
            Gets the Content.
            </summary>
        </member>
        <member name="T:PCLCrypto.Formatters.CapiKeyFormatter">
            <summary>
            Formats keys in the CAPI file format.
            This is the format used by RSACryptoServiceProvider.ExportCspBlob
            </summary>
        </member>
        <member name="T:PCLCrypto.Formatters.KeyFormatter">
            <summary>
            A base class for encoding and decoding RSA keys in various formats.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.Pkcs1">
            <summary>
            The PKCS1 key formatter.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.Pkcs1PrependZeros">
            <summary>
            The PKCS1 key formatter that prepends zeros to certain RSA parameters.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.Pkcs8">
            <summary>
            The PKCS8 key formatter.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.X509SubjectPublicKeyInfo">
            <summary>
            The X509 subject public key information formatter.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.Capi">
            <summary>
            The CAPI key formatter.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.Pkcs1ObjectIdentifier">
            <summary>
            The PKCS1 object identifier
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.KeyFormatter.RsaEncryptionObjectIdentifier">
            <summary>
            The RSA encryption object identifier
            </summary>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.GetFormatter(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <summary>
            Gets the formatter to use for a given blob type.
            </summary>
            <param name="blobType">Type of the key blob.</param>
            <returns>An instance of <see cref="T:PCLCrypto.Formatters.KeyFormatter"/></returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.GetFormatter(PCLCrypto.CryptographicPublicKeyBlobType)">
            <summary>
            Gets the formatter to use for a given blob type.
            </summary>
            <param name="blobType">Type of the key blob.</param>
            <returns>An instance of <see cref="T:PCLCrypto.Formatters.KeyFormatter"/></returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.Write(System.IO.Stream,PCLCrypto.RSAParameters)">
            <summary>
            Writes a key to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.Write(System.IO.Stream,PCLCrypto.RSAParameters,System.Boolean)">
            <summary>
            Writes a key to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="parameters">The parameters.</param>
            <param name="includePrivateKey">if set to <c>true</c> the private key will be written as well; otherwise just the public key will be written.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.Write(PCLCrypto.RSAParameters)">
            <summary>
            Writes a key to a buffer.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The buffer with the serialized key.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.Write(PCLCrypto.RSAParameters,System.Boolean)">
            <summary>
            Writes a key to a buffer.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="includePrivateKey">if set to <c>true</c> the private key will be written as well; otherwise just the public key will be written.</param>
            <returns>The buffer with the serialized key.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.Read(System.IO.Stream)">
            <summary>
            Reads a key from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The RSA key parameters.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.Read(System.Byte[])">
            <summary>
            Reads a key from the specified buffer.
            </summary>
            <param name="keyBlob">The buffer containing the key data.</param>
            <returns>The RSA key parameters.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.PublicKeyFilter(PCLCrypto.RSAParameters)">
            <summary>
            Returns an instance of <see cref="T:PCLCrypto.RSAParameters"/> that does not contain private key info.
            </summary>
            <param name="value">The RSA parameters which may include a private key.</param>
            <returns>An instance of <see cref="T:PCLCrypto.RSAParameters"/> that only includes public key information.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.NegotiateSizes(PCLCrypto.RSAParameters)">
            <summary>
            Tries to add/remove leading zeros as necessary in an attempt to make the parameters CAPI compatible.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The modified set of parameters.</returns>
            <remarks>
            The original parameters and their buffers are not modified.
            </remarks>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.HasPrivateKey(PCLCrypto.RSAParameters)">
            <summary>
            Determines whether a set of RSA parameters includes a private key.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns><c>true</c> if a private key is included; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.ToPlatformParameters(PCLCrypto.RSAParameters)">
            <summary>
            Converts the PCLCrypto <see cref="T:PCLCrypto.RSAParameters"/> struct to the type
            offered by the .NET Framework.
            </summary>
            <param name="value">The PCLCrypto parameters.</param>
            <returns>The .NET Framework parameters.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.ToPCLParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            Converts the .NET Framework <see cref="T:PCLCrypto.RSAParameters"/> struct to the type
            offered by the PCLCrypto library.
            </summary>
            <param name="value">The .NET Framework parameters.</param>
            <returns>The PCLCrypto parameters.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.BufferEqual(System.Byte[],System.Byte[])">
            <summary>
            Checks whether two buffers have equal contents.
            </summary>
            <param name="buffer1">The first buffer.</param>
            <param name="buffer2">The second buffer.</param>
            <returns><c>true</c> if the buffers contain equal contents.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.TrimLeadingZero(System.Byte[])">
            <summary>
            Trims up to one leading byte from the start of a buffer if that byte is a 0x00
            without modifying the original buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>A buffer without a leading zero. It may be the same buffer as was provided if no leading zero was found.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.TrimOrPadZeroToLength(System.Byte[],System.Int32)">
            <summary>
            Trims up to one leading byte from the start of a buffer if that byte is a 0x00
            without modifying the original buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="desiredLength">The length to try to trim or pad to match.</param>
            <returns>
            A buffer without a leading zero. It may be the same buffer as was provided if no leading zero was found.
            </returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.PrependLeadingZero(System.Byte[],System.Boolean)">
            <summary>
            Returns a buffer with a 0x00 byte prepended if the buffer doesn't start with that byte.
            </summary>
            <param name="buffer">The buffer to prepend.</param>
            <param name="alwaysPrependZero">if set to <c>true</c> a new buffer with a zero prepended will always be returned, even if the given buffer already has a leading zero.</param>
            <returns>
            A buffer with the prepended zero.
            </returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.VerifyFormat(System.Boolean,System.String)">
            <summary>
            Throws an exception if a condition does not evaluate to true.
            </summary>
            <param name="condition">if set to <c>false</c> an exception will be thrown.</param>
            <param name="message">An optional message describing the failure.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.FailFormat(System.String)">
            <summary>
            Throws an exception. For use during key deserialization.
            </summary>
            <param name="message">An optional message describing the failure.</param>
            <returns>Nothing. This method always throws.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.ReadCore(System.IO.Stream)">
            <summary>
            Reads a key from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The RSA Parameters of the key.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.KeyFormatter.WriteCore(System.IO.Stream,PCLCrypto.RSAParameters)">
            <summary>
            Writes a key to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="parameters">The RSA parameters of the key.</param>
        </member>
        <member name="F:PCLCrypto.Formatters.CapiKeyFormatter.PublicKeyBlobHeader">
            <summary>
            An identifier that the contents of this blob conform to the PUBLICKEYBLOB specification.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.CapiKeyFormatter.PrivateKeyBlobHeader">
            <summary>
            An identifier that the contents of this blob conform to the PRIVATEKEYBLOB specification.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.CapiKeyFormatter.CurrentBlobVersion">
            <summary>
            A byte indicating the blob version.
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.CapiKeyFormatter.PublicKeyMagicHeader">
            <summary>
            A magic string: "RSA1"
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.CapiKeyFormatter.PrivateKeyMagicHeader">
            <summary>
            A magic string: "RSA2"
            </summary>
        </member>
        <member name="F:PCLCrypto.Formatters.CapiKeyFormatter.KeySpecKeyExchange">
            <summary>
            A magic header that indicates key exchange use.
            </summary>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.IsCapiCompatible(PCLCrypto.RSAParameters)">
            <summary>
            Determines whether the specified RSA parameters
            can be represented in the CAPI format.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns><c>true</c> if CAPI is compatible with these parameters; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.VerifyCapiCompatibleParameters(PCLCrypto.RSAParameters)">
            <summary>
            Throws an exception if the specified RSAParameters cannot be
            serialized in the CAPI format.
            </summary>
            <param name="parameters">The RSA parameters.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.ReadCore(System.IO.Stream)">
            <summary>
            Reads a key from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
            The RSA Parameters of the key.
            </returns>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.WriteCore(System.IO.Stream,PCLCrypto.RSAParameters)">
            <summary>
            Writes a key to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="parameters">The RSA parameters of the key.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.CopyAndReverse(System.Byte[])">
            <summary>
            Returns a copy of the specified buffer where the copy has its byte order reversed.
            </summary>
            <param name="data">The buffer to copy and reverse.</param>
            <returns>The new buffer with the contents of the original buffer reversed.</returns>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.WriteReversed(System.IO.BinaryWriter,System.Byte[],System.Int32)">
            <summary>
            Writes a buffer to a stream in reverse byte order.
            </summary>
            <param name="writer">The writer to copy <paramref name="data"/> to.</param>
            <param name="data">The data to copy, reverse and write to the stream. This buffer instance is not modified.</param>
            <param name="length">The number of bytes to write to the stream after the order reversal. A negative value means to copy the entire buffer.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.CapiKeyFormatter.ReadReversed(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads data from a stream and reverses the byte order.
            </summary>
            <param name="reader">The reader to use to read from the stream.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The buffer read from the stream, after reversing its byte order.</returns>
        </member>
        <member name="T:PCLCrypto.Formatters.Pkcs1KeyFormatter">
            <summary>
            Encodes/decodes public keys and private keys in the PKCS#1 format
            (rsaPublicKey and rsaPrivateKey).
            </summary>
            <remarks>
            The format is described here: http://tools.ietf.org/html/rfc3447#page-46
            </remarks>
        </member>
        <member name="F:PCLCrypto.Formatters.Pkcs1KeyFormatter.prependLeadingZeroOnCertainElements">
            <summary>
            If set to <c>true</c> certain parameters will have a 0x00 prepended to their binary representations: Modulus, P, Q, DP, InverseQ.
            </summary>
        </member>
        <member name="M:PCLCrypto.Formatters.Pkcs1KeyFormatter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.Formatters.Pkcs1KeyFormatter"/> class.
            </summary>
            <param name="prependLeadingZeroOnCertainElements">If set to <c>true</c> certain parameters will have a 0x00 prepended to their binary representations: Modulus, P, Q, DP, InverseQ.</param>
        </member>
        <member name="M:PCLCrypto.Formatters.Pkcs1KeyFormatter.ReadCore(System.IO.Stream)">
            <summary>
            Reads a key from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
            The RSA Parameters of the key.
            </returns>
        </member>
        <member name="M:PCLCrypto.Formatters.Pkcs1KeyFormatter.WriteCore(System.IO.Stream,PCLCrypto.RSAParameters)">
            <summary>
            Writes the core.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:PCLCrypto.Formatters.Pkcs8KeyFormatter">
            <summary>
            Serializes RSA keys in the PKCS8 PrivateKeyInfo format.
            </summary>
            <remarks>
            Spec found at: http://tools.ietf.org/html/rfc5208#page-3
            </remarks>
        </member>
        <member name="M:PCLCrypto.Formatters.Pkcs8KeyFormatter.ReadCore(System.IO.Stream)">
            <summary>
            Reads a key from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
            The RSA Parameters of the key.
            </returns>
        </member>
        <member name="M:PCLCrypto.Formatters.Pkcs8KeyFormatter.WriteCore(System.IO.Stream,PCLCrypto.RSAParameters)">
            <summary>
            Writes a key to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="parameters">The RSA parameters of the key.</param>
        </member>
        <member name="T:PCLCrypto.Formatters.X509SubjectPublicKeyInfoFormatter">
            <summary>
            Encodes/decodes public keys in the X.509 subject public key info format.
            </summary>
        </member>
        <member name="M:PCLCrypto.Formatters.X509SubjectPublicKeyInfoFormatter.ReadCore(System.IO.Stream)">
            <summary>
            Reads a key from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>
            The RSA Parameters of the key.
            </returns>
            <exception cref="T:System.ArgumentException">
            Unexpected format.
            or
            Unexpected format.
            or
            Unexpected algorithm.
            or
            Unexpected format.
            </exception>
        </member>
        <member name="M:PCLCrypto.Formatters.X509SubjectPublicKeyInfoFormatter.WriteCore(System.IO.Stream,PCLCrypto.RSAParameters)">
            <summary>
            Writes a key to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="parameters">The RSA parameters of the key.</param>
        </member>
        <member name="T:PCLCrypto.MacAlgorithmProvider">
            <summary>
            The WinRT implementation of the <see cref="T:PCLCrypto.IMacAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.MacAlgorithmProvider.algorithm">
            <summary>
            The algorithm of this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.#ctor(PCLCrypto.MacAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.MacAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.CreateHash(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.CreateKey(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.MacAlgorithmProvider.GetAlgorithm(PCLCrypto.MacAlgorithm)">
            <summary>
            Returns the keyed hash algorithm from the platform.
            </summary>
            <param name="algorithm">The algorithm desired.</param>
            <returns>The platform-specific algorithm.</returns>
        </member>
        <member name="P:PCLCrypto.MacAlgorithmProvider.Algorithm">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.MacAlgorithmProvider.MacLength">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.NetFxCryptographicHash">
            <summary>
            A .NET Framework implementation of the <see cref="T:PCLCrypto.CryptographicHash"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.NetFxCryptographicHash.EmptyBlock">
            <summary>
            A zero-length byte array.
            </summary>
        </member>
        <member name="F:PCLCrypto.NetFxCryptographicHash.transformedFinalBlock">
            <summary>
            A value indicating whether <see cref="M:PCLCrypto.NetFxCryptographicHash.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)"/> has been called.
            </summary>
        </member>
        <member name="M:PCLCrypto.NetFxCryptographicHash.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.NetFxCryptographicHash"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.NetFxCryptographicHash.Append(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.NetFxCryptographicHash.GetValueAndReset">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.NetFxCryptographicHash.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:PCLCrypto.NetFxCryptographicHash.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.NetFxCryptographicHash.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.NetFxCryptographicHash.Algorithm">
            <summary>
            Gets the platform-specific hash algorithm.
            </summary>
        </member>
        <member name="P:PCLCrypto.NetFxCryptographicHash.CanReuseTransform">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.NetFxCryptographicHash.CanTransformMultipleBlocks">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.NetFxCryptographicHash.InputBlockSize">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.NetFxCryptographicHash.OutputBlockSize">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.SymmetricCryptographicKey">
            <summary>
            A .NET Framework implementation of <see cref="T:PCLCrypto.ICryptographicKey"/> for use with symmetric algorithms.
            </summary>
        </member>
        <member name="F:PCLCrypto.SymmetricCryptographicKey.algorithm">
            <summary>
            The platform's symmetric algorithm.
            </summary>
        </member>
        <member name="F:PCLCrypto.SymmetricCryptographicKey.pclAlgorithm">
            <summary>
            The PCL algorithm enum.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.#ctor(System.Security.Cryptography.SymmetricAlgorithm,PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.SymmetricCryptographicKey"/> class.
            </summary>
            <param name="algorithm">The algorithm, initialized with the key.</param>
            <param name="pclAlgorithm">The PCL enum of the algorithm in use.</param>
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.Export(PCLCrypto.CryptographicPrivateKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.ExportPublicKey(PCLCrypto.CryptographicPublicKeyBlobType)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.Dispose">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.Encrypt(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.Decrypt(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.CreateEncryptor(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.CreateDecryptor(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.ThisOrDefaultIV(System.Byte[])">
            <summary>
            Creates a zero IV buffer.
            </summary>
            <param name="iv">The IV supplied by the caller.</param>
            <returns><paramref name="iv"/> if not null; otherwise a zero-filled buffer.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.IsValidInputSize(System.Int32)">
            <summary>
            Checks whether the given length is a valid one for an input buffer to the symmetric algorithm.
            </summary>
            <param name="lengthInBytes">The length of the input buffer in bytes.</param>
            <returns><c>true</c> if the size is allowed; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:PCLCrypto.SymmetricCryptographicKey.KeySize">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor">
            <summary>
            Adapts a platform ICryptoTransform to the PCL interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.transform">
            <summary>
            The platform transform.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.#ctor(System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor"/> class.
            </summary>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.Dispose">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.CanReuseTransform">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.CanTransformMultipleBlocks">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.InputBlockSize">
            <inheritdoc />
        </member>
        <member name="P:PCLCrypto.SymmetricCryptographicKey.CryptoTransformAdaptor.OutputBlockSize">
            <inheritdoc />
        </member>
        <member name="T:PCLCrypto.SymmetricKeyAlgorithmProvider">
            <summary>
            A .NET Framework implementation of the <see cref="T:PCLCrypto.ISymmetricKeyAlgorithmProvider"/> interface.
            </summary>
        </member>
        <member name="F:PCLCrypto.SymmetricKeyAlgorithmProvider.algorithm">
            <summary>
            The algorithm used by this instance.
            </summary>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.#ctor(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:PCLCrypto.SymmetricKeyAlgorithmProvider"/> class.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.CreateSymmetricKey(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.GetMode(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Gets the platform enum value for the block mode used by the specified algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>The platform-specific enum value describing the block mode.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.GetPadding(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Gets the platform enum value for the padding used by the specified algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
            <returns>The platform-specific enum value for the padding.</returns>
        </member>
        <member name="M:PCLCrypto.SymmetricKeyAlgorithmProvider.GetAlgorithm(PCLCrypto.SymmetricAlgorithm)">
            <summary>
            Returns a platform-specific algorithm that conforms to the prescribed platform-neutral algorithm.
            </summary>
            <param name="algorithm">The PCL algorithm.</param>
            <returns>
            The platform-specific algorithm.
            </returns>
        </member>
        <member name="P:PCLCrypto.SymmetricKeyAlgorithmProvider.Algorithm">
            <inheritdoc/>
        </member>
        <member name="P:PCLCrypto.SymmetricKeyAlgorithmProvider.BlockLength">
            <inheritdoc/>
        </member>
    </members>
</doc>
